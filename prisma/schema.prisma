// This is a fixed version of the Prisma schema
// It removes duplicate model definitions and fixes relation references
// Added many-to-many relation between User and Profession

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profession {
  id        String    @id @default(cuid())
  name      String
  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  users     User[]    // Added relation field for many-to-many with User
}

model Service {
  id           String    @id @default(cuid())
  title        String
  description  String
  date         DateTime?
  timeWindow   Int?
  value        Float?
  status       String    @default("OPEN")
  latitude     Float?
  longitude    Float?
  address      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creatorId    String
  creator      User      @relation("ServiceCreator", fields: [creatorId], references: [id])
  professionId String?
  profession   Profession? @relation(fields: [professionId], references: [id])
  photos       Photo[]
  bids         Bid[]
  favorites    Favorite[]
  cancellations Cancellation[]
  problems     Problem[]
}

model Bid {
  id           String    @id @default(cuid())
  value        Float?
  message      String?
  status       String    @default("PENDING")
  proposedDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  serviceId    String
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerId   String
  provider     User      @relation("BidProvider", fields: [providerId], references: [id])
}

model Cancellation {
  id          String   @id @default(cuid())
  reason      String
  createdAt   DateTime @default(now())
  requesterId String
  serviceId   String
  requester   User     @relation("CancelRequester", fields: [requesterId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Problem {
  id          String   @id @default(cuid())
  description String
  createdAt   DateTime @default(now())
  reporterId  String
  serviceId   String
  reporter    User     @relation("ProblemReporter", fields: [reporterId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  publicId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id        String        @id @default(cuid())
  balance   Float         @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String
  description String?
  status      String   @default("COMPLETED")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  serviceId   String?
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receiverId  String
  receiver    User      @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId    String?
  sender      User?     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  serviceId   String?
  bidId       String?
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receiverId  String
  receiver    User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  giverId     String
  giver       User     @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  serviceId   String?
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  email                 String?         @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  about                 String?
  city                  String?
  state                 String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  accounts              Account[]
  sessions              Session[]
  services              Service[]       @relation("ServiceCreator")
  bids                  Bid[]           @relation("BidProvider")
  cancellations         Cancellation[]  @relation("CancelRequester")
  problems              Problem[]       @relation("ProblemReporter")
  photos                Photo[]
  wallet                Wallet?
  receivedNotifications Notification[]  @relation("NotificationReceiver")
  sentNotifications     Notification[]  @relation("NotificationSender")
  favorites             Favorite[]
  receivedReviews       Review[]        @relation("ReviewReceiver")
  givenReviews          Review[]        @relation("ReviewGiver")
  professions           Profession[]    // Added relation field for many-to-many with Profession
}
