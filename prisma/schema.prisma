generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profession {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  icon      String?
  services  Service[]
  users     User[]    @relation("ProfessionToUser")
}

model Service {
  id            String         @id @default(cuid())
  title         String
  description   String
  date          DateTime?
  timeWindow    Int?
  price         Float?
  latitude      Float?
  longitude     Float?

  // Legacy address field. Auto-generated by the API from structured address components.
  // Can be used for display or as a fallback.
  address       String?
  
  cep         String?   // Brazilian Zip Code
  logradouro  String?   // Street name
  numero      String?   // House/Building number
  complemento String?   // Complement (e.g., Apt, Block)
  bairro      String?   // Neighborhood
  cidade      String?   // City
  uf          String?   // State (2-letter code)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  professionId  String?
  status        ServiceStatus  @default(OPEN) // OPEN, IN_PROGRESS, COMPLETED, CANCELLED, DISPUTED, RESOLVED
  bids          Bid[]
  cancellations Cancellation[]
  favorites     Favorite[]
  photos        Photo[]
  problems      Problem[]
  creator       User           @relation("ServiceCreator", fields: [creatorId], references: [id])
  profession    Profession?    @relation(fields: [professionId], references: [id])
  completionConfirmations CompletionConfirmation[] // Added relation
  reviews       Review[]
  disputeResolutions DisputeResolution[] // Relation to dispute resolutions
}

model Bid {
  id           String    @id @default(cuid())
  price        Float?
  message      String?
  status       String    @default("PENDING") // PENDING, ACCEPTED, REJECTED, COUNTER_OFFER, WITHDRAWN
  proposedDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  serviceId    String
  providerId   String
  provider     User      @relation("BidProvider", fields: [providerId], references: [id])
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Cancellation {
  id          String   @id @default(cuid())
  reason      String
  createdAt   DateTime @default(now())
  requesterId String
  serviceId   String
  requester   User     @relation("CancelRequester", fields: [requesterId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Problem {
  id          String   @id @default(cuid())
  description String
  createdAt   DateTime @default(now())
  reporterId  String
  serviceId   String
  reporter    User     @relation("ProblemReporter", fields: [reporterId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  publicId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0) // Represents TOTAL balance
  reservedBalance Float      @default(0) // Funds reserved for active services
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?       @unique
  platformId   String?       @unique
  transactions Transaction[]
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform     Platform?     @relation(fields: [platformId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  walletId    String
  serviceId   String?  // Link to service for context
  type        String   // e.g., PAYMENT, REFUND, WITHDRAWAL, DEPOSIT, PLATFORM_FEE
  status      String   @default("COMPLETED") // COMPLETED, PENDING, FAILED
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiverId String
  senderId   String?
  bidId      String?
  serviceId  String?
  title      String
  type       String   // e.g., BID, ACCEPTANCE, REJECTION, COUNTER_OFFER, COMPLETION, PAYMENT, PROBLEM
  receiver   User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("NotificationSender", fields: [senderId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiverId String   // User being reviewed
  giverId    String   // User giving the review
  serviceId  String?
  giver      User     @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  // emailVerified         DateTime? // Replaced by emailIsVerified and emailVerificationToken
  password              String?
  image                 String?        // Avatar URL
  about                 String?
  city                  String?
  state                 String?
  cpf                   String?        @unique // Brazilian CPF number
  emailIsVerified       Boolean        @default(false)
  emailVerificationToken String?       @unique

  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  accounts              Account[]
  bids                  Bid[]          @relation("BidProvider")
  cancellations         Cancellation[] @relation("CancelRequester")
  favorites             Favorite[]
  receivedNotifications Notification[] @relation("NotificationReceiver")
  sentNotifications     Notification[] @relation("NotificationSender")
  photos                Photo[]        // Gallery photos
  problems              Problem[]      @relation("ProblemReporter")
  givenReviews          Review[]       @relation("ReviewGiver")
  receivedReviews       Review[]       @relation("ReviewReceiver")
  services              Service[]      @relation("ServiceCreator")
  sessions              Session[]
  wallet                Wallet?
  professions           Profession[]   @relation("ProfessionToUser")
  completionConfirmations CompletionConfirmation[] // Added relation
  favoritedBy     UserFavorite[] @relation("FavoritedUser") // Users who favorited this user
  favoritedUsers  UserFavorite[] @relation("FavoritedBy")   // Users this user has favorited
  role                  Role           @default(USER) // Add role field
  isBlocked             Boolean        @default(false) // For admin to block users
  resolvedDisputes      DisputeResolution[] @relation("AdminResolver") // Disputes resolved by this admin
  adminAudits           AdminAuditLog[]     @relation("AdminAudits")   // Audits performed by this admin

  @@index([cpf])
}

enum Role {
  USER
  ADMIN
}

// New model for Completion Confirmations
model CompletionConfirmation {
  id          String   @id @default(cuid())
  serviceId   String
  userId      String   // ID do usuário que confirmou (criador ou prestador)
  confirmedAt DateTime @default(now())

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serviceId, userId]) // Garante que cada usuário só confirme uma vez por serviço
}

// New model for Platform
model Platform {
  id          String   @id @default(cuid())
  name        String   @default("UTASK")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wallet      Wallet?
}

model UserFavorite {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  favoritedById String
  favoritedBy   User     @relation("FavoritedBy", fields: [favoritedById], references: [id], onDelete: Cascade)

  favoritedUserId String
  favoritedUser   User     @relation("FavoritedUser", fields: [favoritedUserId], references: [id], onDelete: Cascade)

  @@unique([favoritedById, favoritedUserId], name: "unique_user_favorite")
  @@index([favoritedById])
  @@index([favoritedUserId])
}

model AdminAuditLog {
  id               String    @id @default(cuid())
  timestamp        DateTime  @default(now())
  adminId          String
  adminEmail       String    // Para facilitar a visualização sem joins complexos sempre
  action           String    // Ex: "USER_BLOCKED", "PROFESSION_CREATED", "DISPUTE_RESOLVED"
  targetEntityType String?   // Ex: "User", "Profession", "Service"
  targetEntityId   String?   // ID da entidade que foi afetada
  details          Json?     // Detalhes da ação, como payload da request ou old/new values
  admin            User      @relation("AdminAudits", fields: [adminId], references: [id], onDelete: Restrict) // Evitar que logs sumam se admin for deletado

  @@index([adminId])
  @@index([action])
  @@index([targetEntityType])
  @@index([targetEntityId])
  @@index([timestamp])
}

model DisputeResolution {
  id            String    @id @default(cuid())
  serviceId     String    @unique // Um serviço só pode ter uma resolução de disputa final
  service       Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Added onDelete

  adminId       String    // ID do admin que resolveu
  admin         User      @relation("AdminResolver", fields: [adminId], references: [id], onDelete: Cascade) // Added onDelete

  decision      String    // e.g., "RELEASE_TO_PROVIDER", "REFUND_TO_CLIENT", "PARTIAL_REFUND", "NO_ACTION"
  justification String?
  resolvedAt    DateTime  @default(now())

  amountReleasedToProvider Float? // Quanto foi liberado para o prestador (pode ser parte do valor em disputa)
  amountRefundedToClient   Float? // Quanto foi estornado para o cliente (pode ser parte do valor em disputa)

  @@index([serviceId]) // Index for faster queries by serviceId
  @@index([adminId])   // Index for faster queries by adminId
}

enum ServiceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
  RESOLVED // Added for dispute resolution
}
