// Este é um esquema Prisma atualizado que inclui o modelo Review e o campo rating no modelo User
// Salve como /prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rating        Float?    @default(0) // Campo rating adicionado
  
  // Relações
  accounts      Account[]
  sessions      Session[]
  services      Service[]   @relation("ServiceCreator")
  bids          ServiceBid[] @relation("BidProvider")
  wallet        Wallet?
  favorites     Favorite[]
  
  // Notificações
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  // Cancelamentos e problemas
  cancelRequests ServiceCancelRequest[] @relation("CancelRequester")
  reportedProblems ServiceProblem[] @relation("ProblemReporter")
  
  // Reviews
  receivedReviews Review[] @relation("ReviewReceiver")
  givenReviews    Review[] @relation("ReviewGiver")
  
  // Profissões
  professions     UserProfession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String    @db.Text
  date        DateTime?
  timeWindow  Int?      // Janela de tempo em minutos
  value       Float?
  status      ServiceStatus @default(OPEN)
  latitude    Float?
  longitude   Float?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  creatorId   String
  creator     User     @relation("ServiceCreator", fields: [creatorId], references: [id])
  bids        ServiceBid[]
  favorites   Favorite[]
  cancelRequests ServiceCancelRequest[]
  problems    ServiceProblem[]
  transactions Transaction[]
  
  // Imagens
  images      ServiceImage[]
}

model ServiceBid {
  id          String   @id @default(cuid())
  value       Float?
  message     String?  @db.Text
  status      BidStatus @default(PENDING)
  proposedDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerId  String
  provider    User     @relation("BidProvider", fields: [providerId], references: [id])
}

model ServiceCancelRequest {
  id          String   @id @default(cuid())
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  requester   User     @relation("CancelRequester", fields: [requesterId], references: [id])
  requesterId String
  reason      String?  @db.Text
  createdAt   DateTime @default(now())
}

model ServiceProblem {
  id          String   @id @default(cuid())
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  reporter    User     @relation("ProblemReporter", fields: [reporterId], references: [id])
  reporterId  String
  reason      String?  @db.Text
  createdAt   DateTime @default(now())
}

model ServiceImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String?  // ID público do Cloudinary
  createdAt DateTime @default(now())
  
  // Relações
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        TransactionType
  description String?
  createdAt   DateTime @default(now())
  
  // Relações
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  receiverId  String?
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relações
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serviceId])
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relações
  receiverId String
  receiver   User   @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId   String?
  sender     User?  @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
}

model Profession {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  users       UserProfession[]
}

model UserProfession {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Relações
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionId String
  profession  Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, professionId])
}

// Modelo Review adicionado
model Review {
  id          String   @id @default(cuid())
  rating      Float
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  
  // Relações
  receiverId  String
  receiver    User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  giverId     String
  giver       User     @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
}

// Enum para Status do Serviço
enum ServiceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para Status da Proposta
enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFER
  COUNTER_OFFERED // Mantido para compatibilidade com dados existentes
}

// Enum para Tipo de Transação
enum TransactionType {
  PAYMENT
  REFUND
  WITHDRAWAL
  DEPOSIT
  RECEIPT // Mantido para compatibilidade com dados existentes
}

// Enum para Tipo de Notificação
enum NotificationType {
  BID
  COUNTER_OFFER
  ACCEPTANCE
  REJECTION
  SERVICE_COMPLETION
  REVIEW
  SERVICE_PROBLEM
  SERVICE_CANCELLED // Mantido para compatibilidade com dados existentes
  CANCEL_REQUEST // Mantido para compatibilidade com dados existentes
  CANCEL_REJECTED // Mantido para compatibilidade com dados existentes
  COMPLETION_CONFIRMATION // Mantido para compatibilidade com dados existentes
  SYSTEM // Mantido para compatibilidade com dados existentes
}
